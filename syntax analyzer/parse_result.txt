-Token: identifier	-Lexeme: a
	<Statement> -> <Expression-statement> | <Assign> | <If> | <Declare> | <Return> | <While>
	<Expression Statement> -> <Expression>;
	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> identifier | int | identifier ( <IDs> ) | ( <Expression> ) | real | true | false
-Token: operator	-Lexeme: +
	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<Empty> -> epsilon
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
-Token: identifier	-Lexeme: b
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> identifier | int | identifier ( <IDs> ) | ( <Expression> ) | real | true | false
-Token: separator	-Lexeme: ;
	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<Empty> -> epsilon
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> epsilon

Finished.
